import { createSelector } from "reselect";

// selectors
const radiusSelector    = (state) => state.signalRadius.radius;
const firefliesSelector = (state) => state.fireflies;
const blinkLogSelector  = (state) => state.blinkLog;

// derive the firefly neighbors (fireflies that are withing the signalRadius
// of each firelfly)
const firefliesWithNeighborsSelector = createSelector(
    [firefliesSelector, radiusSelector],

    (fireflies, radius) => {
        return fireflies.map(f1 => {
            let neighbors = fireflies
                // we only need the id, calculate the distance from f1
                .map(f2 => {
                    return Object.assign({}, {
                        id: f2.id,
                        distance: getDistance(f1, f2)
                    });
                })
                // only keep the fireflies that are close to f1
                .filter(f3 => {
                    return (f3.id !== f1.id) && (f3.distance < radius);
                })
                .sort((a, b) => b.distance - a.distance);

            return Object.assign({}, f1, { neighbors });
        });
    }
);

export const getFireflies = createSelector(
    [firefliesWithNeighborsSelector, blinkLogSelector],
    (fireflies, blinkLog) => {

        // TODO this won't work because this calculation needs to happen ON BLINK
        return fireflies.map(ff => {
            // check the blink log for a blink that happened in the last 500ms
            let closeBlinks = blinkLog.filter((b) => {
                let diff = Date.now() - b.timestamp;
                let isNeighbor = Boolean(ff.neighbors.find((n) => n.id === b.id));
                // if this blink is detected in the 2nd half
                return isNeighbor && (diff < (ff.interval/2));
            });

            // determine the new interval
            let interval = (closeBlinks.length > 0) ? 900 : 1000;

            if (ff.id <= 0 ){
                console.log("firefly #", ff.id);
                closeBlinks.forEach((b) => {
                    console.log(b.id, Date.now() - b.timestamp);
                });
                console.log("new interval", interval);
            }

            return Object.assign({}, ff, { interval });

        });
    }
);

function getDistance(f1, f2){
    const distY = Math.abs(f1.y - f2.y);
    const distX = Math.abs(f1.x - f2.x);
    return Math.sqrt(Math.pow(distX, 2) + Math.pow(distY, 2));
}
